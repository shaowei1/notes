apiVersion: apps/v1 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9 # replace it with your exactly <image_name:tags>
        ports:
        - containerPort: 80
        livenessProbe:
#          exec:
#            command:
#            - sh
#            - -c
#            - "mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}"
#
#          tcpSocket:
#            port: 8080
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          timeoutSeconds: 5
          periodSeconds: 5
        readinessProbe:
#          exec:
#            command:
#            - sh
#            - -c
#            - "mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}"
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 5
        # specify user/password from existing secret
        env:
          - name: SECRET_USERNAME
            valueFrom:
              secretKeyRef:
                name: test-secret
                key: username
          - name: SECRET_PASSWORD
            valueFrom:
              secretKeyRef:
                name: test-secret
                key: password
          # Define the environment variable for configmap
          - name: SPECIAL_LEVEL_KEY
            valueFrom:
              configMapKeyRef:
                # The ConfigMap containing the value you want to assign to SPECIAL_LEVEL_KEY
                name: aliyun-config
                # Specify the key associated with the value
                key: special.env
        # configMap volume
        volumeMounts:
          - name: config-volume
            mountPath: /etc/config
      volumes:
        - name: config-volume
          configMap:
            name: aliyun-config
#            items:
#            - key: special.env
#              path: env
      # create docker registry secrects with:
      # ` kubectl create secret docker-registry myregistrykey --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL`
      imagePullSecrets:          #Comment out to enable specific image pull secret
      - name: myregistrykey    # repleace it wity your specific docker registry secret
      # alternative way to set this field of imagePullSecrets can be automated by setting the imagePullSecrets in a serviceAccount resource
#      serviceAccountName: user1
#      automountServiceAccountToken: false